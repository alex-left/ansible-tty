#!/usr/bin/env python3
'''
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
'''
import json
import subprocess
import shutil
import argparse
import sys
import termios
import os


def check_python_version():
    if not sys.version_info[:2] >= (3, 5):
        print("You need python 3.5 or greeter")
        exit(1)


def check_executable():
    if shutil.which('ansible-inventory') is None:
        print("Can't find ansible-inventory executable.")
        print("You must have installed ansible >=2.4")
        exit(1)


def parser_args():
    parser = argparse.ArgumentParser(
             description="""Init an ssh interactive terminal
                using ansible inventories""")

    parser.add_argument("-i", "--inventory", nargs=1, required=False,
                              help='''use a specific ansible inventory''',
                              type=str)

    parser.add_argument("hostname", action="store", type=str,
                        default=None, nargs='?',
                        help='''Try to filter and connect to the unique hostname''',)

    return parser.parse_args()


def get_inventory(inventory_path):
    ''' receive and inventory path (string) from argparse (the value could be None)
    and run "ansible-inventory" with custom or default inventory.
    return an ansible inventory in json format'''
    ansible_cmd = ['ansible-inventory']
    if inventory_path and os.path.exists(inventory_path[0]):
        ansible_cmd.extend(["-i", *inventory_path])
    ansible_cmd.extend(["--list"])
    print("getting inventory... please wait")
    proc = subprocess.run(ansible_cmd, stdout=subprocess.PIPE)
    if proc.returncode != 0:
        print(proc.stdout.decode('utf-8'))
        exit(proc.returncode)
    return json.loads(proc.stdout.decode('utf-8'))


def get_host(inventory, hostname):
    ''' receive an ansible inventory in json format
    since ["_meta"]["hostvars"] keys and the desired hostname from argparse.
    returns a string with a valid hostname'''
    hostlist = list(inventory.keys())
    if hostname in hostlist:
        return hostname
    elif hostname and hostname not in hostlist:
        print(hostname, "not finded.")
    # never want localhost
    if "localhost" in hostlist:
        hostlist.remove("localhost")
    if len(hostlist) == 1:
        if not 'ansible_host' in inventory[hostlist[0]]:
            inventory[hostlist[0]]['ansible_host'] = hostlist[0]
        return hostlist[0]
    print("Available hosts: ")
    for pos, host in enumerate(hostlist):
        if "ansible_host" in inventory[host]:
            line = [host, inventory[host]["ansible_host"]]
            # add ec2 name if exists
            if 'ec2_tag_Name' in inventory[host]:
                line.append(inventory[host]['ec2_tag_Name'])
            print("\t", str(pos) + ":", " - ".join(line))
    option = None
    termios.tcflush(sys.stdin, termios.TCIOFLUSH)
    while option not in range(len(hostlist)):
        try:
            option = int(
                input("choose a valid option or press CRTL + C to exit: \n"))
        except ValueError:
            pass
    return hostlist[option]


def run_ssh(inventory_host):
    ''' receive an ansible inventory of single host in json format, check optional args,
    check private_key and run ssh command to launch the remote session'''
    ssh_cmd = ['ssh', inventory_host['ansible_user'] +
               '@'+inventory_host['ansible_host']]
    if 'ansible_ssh_private_key_file' in inventory_host:
        ssh_cmd.extend(['-i', inventory_host['ansible_ssh_private_key_file']])
    if 'ansible_ssh_extra_args' in inventory_host:
        ssh_cmd.extend([inventory_host['ansible_ssh_extra_args']])
    if 'ansible_port' in inventory_host:
        ansible_port = str(inventory_host['ansible_port'])
        ssh_cmd.extend(['-p', ansible_port])
    subprocess.run(ssh_cmd)


def main():
    check_python_version()
    args = parser_args()
    hostname = args.hostname
    inventory_path = args.inventory
    check_executable()
    meta_inventory = get_inventory(inventory_path)["_meta"]["hostvars"]
    inventory_host = meta_inventory[get_host(meta_inventory, hostname)]
    run_ssh(inventory_host)


if __name__ == "__main__":
    main()
